/* HL.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. HL.java */
public class HL/*@bgen(jjtree)*/implements HLTreeConstants, HLConstants {/*@bgen(jjtree)*/
  protected static JJTHLState jjtree = new JJTHLState();

// ===========================================================================
//                                 P A R S E R   
// ===========================================================================

// ------------------------------- BEGINNING -----------------------------------
  static final public 
SimpleNode start() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LCURLY:
    case LPAREN:
    case MINUS:
    case FOR:
    case IF:
    case NULL:
    case NUM:
    case OBJ:
    case PREDICATE:
    case PRINT:
    case PRINTLN:
    case RETURN:
    case SET:
    case SUB:
    case STR:
    case WHILE:
    case NUMBER:
    case IDENTIFIER:
    case STRING:{
      S();
{if ("" != null) return (SimpleNode) (jjtree.popNode());}
      break;
      }
    case 0:{
      jj_consume_token(0);
{if (true) throw ParseAbortException.EOF;}
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  static final public void S() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FOR:
    case IF:
    case NUM:
    case OBJ:
    case PREDICATE:
    case PRINT:
    case PRINTLN:
    case RETURN:
    case SET:
    case SUB:
    case STR:
    case WHILE:{
      statement_ll();
      jj_consume_token(SEMICOL);
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      if (jj_2_1(2)) {
        assignment();
        jj_consume_token(SEMICOL);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LCURLY:
        case LPAREN:
        case MINUS:
        case NULL:
        case NUMBER:
        case IDENTIFIER:
        case STRING:{
          expression();
          jj_consume_token(SEMICOL);
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
}

// ------------------------------- STATEMENTS -----------------------------------
  static final public void statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FOR:
    case IF:
    case NUM:
    case OBJ:
    case PREDICATE:
    case PRINT:
    case PRINTLN:
    case RETURN:
    case SET:
    case SUB:
    case STR:
    case WHILE:{
      statement_ll();
      jj_consume_token(SEMICOL);
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      if (jj_2_2(2)) {
        assignment();
        jj_consume_token(SEMICOL);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IDENTIFIER:{
          fn_call();
          jj_consume_token(SEMICOL);
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
}

  static final public void statement_ll() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUM:
    case OBJ:
    case PREDICATE:
    case SET:
    case SUB:
    case STR:{
      declaration();
      break;
      }
    case IF:{
      if_stat();
      break;
      }
    case FOR:{
      for_stat();
      break;
      }
    case WHILE:{
      while_stat();
      break;
      }
    case PRINT:{
      print_stat();
      break;
      }
    case PRINTLN:{
      println_stat();
      break;
      }
    case RETURN:{
      return_stat();
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void body() throws ParseException {/*@bgen(jjtree) body */
  ASTbody jjtn000 = new ASTbody(JJTBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case FOR:
        case IF:
        case NUM:
        case OBJ:
        case PREDICATE:
        case PRINT:
        case PRINTLN:
        case RETURN:
        case SET:
        case SUB:
        case STR:
        case WHILE:
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          break label_1;
        }
        statement();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  static final public void clause() throws ParseException {/*@bgen(jjtree) clause */
  ASTclause jjtn000 = new ASTclause(JJTCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_2:
      while (true) {
        statement();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case FOR:
        case IF:
        case NUM:
        case OBJ:
        case PREDICATE:
        case PRINT:
        case PRINTLN:
        case RETURN:
        case SET:
        case SUB:
        case STR:
        case WHILE:
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[7] = jj_gen;
          break label_2;
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

// ------------------------------- DECLARATIONS ------------------------------
  static final public 
void declaration() throws ParseException {
    if (jj_2_3(2)) {
      simple_decl();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUM:
      case OBJ:
      case SET:
      case STR:{
        fn_decl();
        break;
        }
      case SUB:{
        sub_decl();
        break;
        }
      case PREDICATE:{
        predicate_decl();
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

  static final public void simple_decl() throws ParseException {/*@bgen(jjtree) simple_decl */
  ASTsimple_decl jjtn000 = new ASTsimple_decl(JJTSIMPLE_DECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      type();
      ident_list();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  static final public void ident_list() throws ParseException {/*@bgen(jjtree) ident_list */
  ASTident_list jjtn000 = new ASTident_list(JJTIDENT_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      identifier();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          break label_3;
        }
        jj_consume_token(COMMA);
        identifier();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  static final public void fn_decl() throws ParseException {/*@bgen(jjtree) fn_decl */
  ASTfn_decl jjtn000 = new ASTfn_decl(JJTFN_DECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      type();
      jj_consume_token(FUNCTION);
      identifier();
      jj_consume_token(LPAREN);
      param_decls();
      jj_consume_token(RPAREN);
      body();
      jj_consume_token(END);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  static final public void sub_decl() throws ParseException {/*@bgen(jjtree) sub_decl */
  ASTsub_decl jjtn000 = new ASTsub_decl(JJTSUB_DECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SUB);
      identifier();
      jj_consume_token(LPAREN);
      param_decls();
      jj_consume_token(RPAREN);
      body();
      jj_consume_token(END);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  static final public void predicate_decl() throws ParseException {/*@bgen(jjtree) predicate_decl */
  ASTpredicate_decl jjtn000 = new ASTpredicate_decl(JJTPREDICATE_DECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PREDICATE);
      identifier();
      jj_consume_token(LPAREN);
      param_decls();
      jj_consume_token(RPAREN);
      body();
      jj_consume_token(END);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  static final public void type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUM:{
ASTNUMTYPE jjtn001 = new ASTNUMTYPE(JJTNUMTYPE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(NUM);
      } finally {
if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
      }
      break;
      }
    case STR:{
ASTSTRTYPE jjtn002 = new ASTSTRTYPE(JJTSTRTYPE);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(STR);
      } finally {
if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
      }
      break;
      }
    case SET:{
ASTSETTYPE jjtn003 = new ASTSETTYPE(JJTSETTYPE);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
      try {
        jj_consume_token(SET);
      } finally {
if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
    }
      }
      break;
      }
    case OBJ:{
ASTOBJTYPE jjtn004 = new ASTOBJTYPE(JJTOBJTYPE);
    boolean jjtc004 = true;
    jjtree.openNodeScope(jjtn004);
      try {
        jj_consume_token(OBJ);
      } finally {
if (jjtc004) {
      jjtree.closeNodeScope(jjtn004, true);
    }
      }
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void param_decls() throws ParseException {/*@bgen(jjtree) param_decls */
  ASTparam_decls jjtn000 = new ASTparam_decls(JJTPARAM_DECLS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUM:
      case OBJ:
      case SET:
      case STR:{
        param_decl();
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[11] = jj_gen;
            break label_4;
          }
          jj_consume_token(COMMA);
          param_decl();
        }
        break;
        }
      default:
        jj_la1[12] = jj_gen;
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;

      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  static final public void param_decl() throws ParseException {/*@bgen(jjtree) param_decl */
  ASTparam_decl jjtn000 = new ASTparam_decl(JJTPARAM_DECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      type();
      identifier();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

// ------------------------------- ASSIGNMENT, IF, LOOPS ------------------------------
  static final public 
void assignment() throws ParseException {/*@bgen(jjtree) assignment */
  ASTassignment jjtn000 = new ASTassignment(JJTASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      identifier();
      jj_consume_token(ASSIGN);
      expression();
    } catch (Throwable jjte000) {
if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte000;}
        }
        if (jjte000 instanceof ParseException) {
          {if (true) throw (ParseException)jjte000;}
        }
        {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
          jjtree.closeNodeScope(jjtn000, true);
        }
    }
}

  static final public void if_stat() throws ParseException {/*@bgen(jjtree) if_stat */
  ASTif_stat jjtn000 = new ASTif_stat(JJTIF_STAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IF);
      condition();
      jj_consume_token(THEN);
      clause();
      else_clause();
      jj_consume_token(FI);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  static final public void else_clause() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELIF:{
ASTif_stat jjtn001 = new ASTif_stat(JJTIF_STAT);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(ELIF);
        condition();
        jj_consume_token(THEN);
        clause();
        else_clause();
      } catch (Throwable jjte001) {
if (jjtc001) {
             jjtree.clearNodeScope(jjtn001);
             jjtc001 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte001 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte001;}
           }
           if (jjte001 instanceof ParseException) {
             {if (true) throw (ParseException)jjte001;}
           }
           {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
           }
      }
      break;
      }
    case ELSE:{
      jj_consume_token(ELSE);
      clause();
      break;
      }
    default:
      jj_la1[13] = jj_gen;
ASTNOTHING jjtn002 = new ASTNOTHING(JJTNOTHING);
     boolean jjtc002 = true;
     jjtree.openNodeScope(jjtn002);
      try {
jjtree.closeNodeScope(jjtn002, true);
     jjtc002 = false;

      } finally {
if (jjtc002) {
       jjtree.closeNodeScope(jjtn002, true);
     }
      }
    }
}

  static final public void for_stat() throws ParseException {
    if (jj_2_4(3)) {
      for_explicit();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FOR:{
        for_implicit();
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

  static final public void for_explicit() throws ParseException {/*@bgen(jjtree) for_explicit */
  ASTfor_explicit jjtn000 = new ASTfor_explicit(JJTFOR_EXPLICIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FOR);
      identifier();
      jj_consume_token(FROM);
      expression();
      jj_consume_token(TO);
      expression();
      jj_consume_token(DO);
      body();
      jj_consume_token(OD);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  static final public void for_implicit() throws ParseException {/*@bgen(jjtree) for_implicit */
  ASTfor_implicit jjtn000 = new ASTfor_implicit(JJTFOR_IMPLICIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FOR);
      identifier();
      jj_consume_token(IN);
      expression();
      jj_consume_token(DO);
      body();
      jj_consume_token(OD);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  static final public void while_stat() throws ParseException {/*@bgen(jjtree) while_stat */
  ASTwhile_stat jjtn000 = new ASTwhile_stat(JJTWHILE_STAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(WHILE);
      condition();
      jj_consume_token(DO);
      body();
      jj_consume_token(OD);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

// ------------------------------- FN CALLS, RETURN, PRINT -----------------------------
  static final public 
void fn_call() throws ParseException {/*@bgen(jjtree) fn_call */
  ASTfn_call jjtn000 = new ASTfn_call(JJTFN_CALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      identifier();
      jj_consume_token(LPAREN);
      optional_parameters();
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  static final public void return_stat() throws ParseException {/*@bgen(jjtree) return_stat */
  ASTreturn_stat jjtn000 = new ASTreturn_stat(JJTRETURN_STAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RETURN);
      optional_return_value();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  static final public void optional_return_value() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TRUE:{
ASTTRUE jjtn001 = new ASTTRUE(JJTTRUE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(TRUE);
      } finally {
if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
      break;
      }
    case FALSE:{
ASTFALSE jjtn002 = new ASTFALSE(JJTFALSE);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(FALSE);
      } finally {
if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
      }
      break;
      }
    case LCURLY:
    case LPAREN:
    case MINUS:
    case NULL:
    case NUMBER:
    case IDENTIFIER:
    case STRING:{
      expression();
      break;
      }
    default:
      jj_la1[15] = jj_gen;
ASTNOTHING jjtn003 = new ASTNOTHING(JJTNOTHING);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
      try {
jjtree.closeNodeScope(jjtn003, true);
    jjtc003 = false;

      } finally {
if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
    }
      }
    }
}

  static final public void print_stat() throws ParseException {
    jj_consume_token(PRINT);
ASTprint jjtn001 = new ASTprint(JJTPRINT);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
    try {
      parameters();
    } catch (Throwable jjte001) {
if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte001;}
            }
            if (jjte001 instanceof ParseException) {
              {if (true) throw (ParseException)jjte001;}
            }
            {if (true) throw (Error)jjte001;}
    } finally {
if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
            }
    }
}

  static final public void println_stat() throws ParseException {
    jj_consume_token(PRINTLN);
ASTprintln jjtn001 = new ASTprintln(JJTPRINTLN);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
    try {
      optional_parameters();
    } catch (Throwable jjte001) {
if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte001;}
              }
              if (jjte001 instanceof ParseException) {
                {if (true) throw (ParseException)jjte001;}
              }
              {if (true) throw (Error)jjte001;}
    } finally {
if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
              }
    }
}

  static final public void optional_parameters() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LCURLY:
    case LPAREN:
    case MINUS:
    case NULL:
    case NUMBER:
    case IDENTIFIER:
    case STRING:{
      parameters();
      break;
      }
    default:
      jj_la1[16] = jj_gen;
ASTparameters jjtn001 = new ASTparameters(JJTPARAMETERS);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;

      } finally {
if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
    }
}

  static final public void parameters() throws ParseException {/*@bgen(jjtree) parameters */
  ASTparameters jjtn000 = new ASTparameters(JJTPARAMETERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      expression();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[17] = jj_gen;
          break label_5;
        }
        jj_consume_token(COMMA);
        expression();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

// ------------------------------- CONDITIONS -----------------------------
  static final public 
void condition() throws ParseException {
ASTor jjtn001 = new ASTor(JJTOR);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
    try {
      and_clause();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case OR:{
          ;
          break;
          }
        default:
          jj_la1[18] = jj_gen;
          break label_6;
        }
        jj_consume_token(OR);
        and_clause();
      }
    } catch (Throwable jjte001) {
if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
    } finally {
if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
    }
}

  static final public void and_clause() throws ParseException {
ASTand jjtn001 = new ASTand(JJTAND);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
    try {
      not_clause();
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case AND:{
          ;
          break;
          }
        default:
          jj_la1[19] = jj_gen;
          break label_7;
        }
        jj_consume_token(AND);
        not_clause();
      }
    } catch (Throwable jjte001) {
if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
    } finally {
if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
    }
}

  static final public void not_clause() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NOT:{
      jj_consume_token(NOT);
ASTnot jjtn001 = new ASTnot(JJTNOT);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
      try {
        not_clause();
      } catch (Throwable jjte001) {
if (jjtc001) {
                  jjtree.clearNodeScope(jjtn001);
                  jjtc001 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                  {if (true) throw (RuntimeException)jjte001;}
                }
                if (jjte001 instanceof ParseException) {
                  {if (true) throw (ParseException)jjte001;}
                }
                {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001, true);
                }
      }
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      if (jj_2_5(2147483647)) {
        isatype();
      } else if (jj_2_6(2147483647)) {
        comparison();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LPAREN:{
          jj_consume_token(LPAREN);
          condition();
          jj_consume_token(RPAREN);
          break;
          }
        case IDENTIFIER:{
          fn_call();
          break;
          }
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
}

  static final public void comparison() throws ParseException {/*@bgen(jjtree) comparison */
  ASTcomparison jjtn000 = new ASTcomparison(JJTCOMPARISON);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      expression();
      comparator();
      expression();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  static final public void comparator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LESS:{
ASTLESS jjtn001 = new ASTLESS(JJTLESS);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(LESS);
      } finally {
if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
      }
      break;
      }
    case LESSEQ:{
ASTLESSEQ jjtn002 = new ASTLESSEQ(JJTLESSEQ);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(LESSEQ);
      } finally {
if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
      }
      break;
      }
    case GREATER:{
ASTGREATER jjtn003 = new ASTGREATER(JJTGREATER);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
      try {
        jj_consume_token(GREATER);
      } finally {
if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
    }
      }
      break;
      }
    case GREATEQ:{
ASTGREATEQ jjtn004 = new ASTGREATEQ(JJTGREATEQ);
    boolean jjtc004 = true;
    jjtree.openNodeScope(jjtn004);
      try {
        jj_consume_token(GREATEQ);
      } finally {
if (jjtc004) {
      jjtree.closeNodeScope(jjtn004, true);
    }
      }
      break;
      }
    case NOTCOMP:{
ASTNOTCOMP jjtn005 = new ASTNOTCOMP(JJTNOTCOMP);
    boolean jjtc005 = true;
    jjtree.openNodeScope(jjtn005);
      try {
        jj_consume_token(NOTCOMP);
      } finally {
if (jjtc005) {
      jjtree.closeNodeScope(jjtn005, true);
    }
      }
      break;
      }
    case EQUAL:{
ASTEQUAL jjtn006 = new ASTEQUAL(JJTEQUAL);
    boolean jjtc006 = true;
    jjtree.openNodeScope(jjtn006);
      try {
        jj_consume_token(EQUAL);
      } finally {
if (jjtc006) {
      jjtree.closeNodeScope(jjtn006, true);
    }
      }
      break;
      }
    case NOTEQ:{
ASTNOTEQ jjtn007 = new ASTNOTEQ(JJTNOTEQ);
    boolean jjtc007 = true;
    jjtree.openNodeScope(jjtn007);
      try {
        jj_consume_token(NOTEQ);
      } finally {
if (jjtc007) {
      jjtree.closeNodeScope(jjtn007, true);
    }
      }
      break;
      }
    case ISIN:{
ASTISIN jjtn008 = new ASTISIN(JJTISIN);
    boolean jjtc008 = true;
    jjtree.openNodeScope(jjtn008);
      try {
        jj_consume_token(ISIN);
      } finally {
if (jjtc008) {
      jjtree.closeNodeScope(jjtn008, true);
    }
      }
      break;
      }
    case NOTIN:{
ASTNOTIN jjtn009 = new ASTNOTIN(JJTNOTIN);
    boolean jjtc009 = true;
    jjtree.openNodeScope(jjtn009);
      try {
        jj_consume_token(NOTIN);
      } finally {
if (jjtc009) {
      jjtree.closeNodeScope(jjtn009, true);
    }
      }
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void isatype() throws ParseException {/*@bgen(jjtree) isatype */
  ASTisatype jjtn000 = new ASTisatype(JJTISATYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      term();
      jj_consume_token(ISA);
      type();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

// ------------------------------- EXPRESSIONS -----------------------------
  static final public 
void expression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LCURLY:
    case LPAREN:
    case NULL:
    case NUMBER:
    case IDENTIFIER:
    case STRING:{
      product();
      more_products();
      break;
      }
    case MINUS:{
ASTnegate jjtn001 = new ASTnegate(JJTNEGATE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(MINUS);
        product();
      } catch (Throwable jjte001) {
if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
      more_products();
      break;
      }
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void more_products() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PLUS:{
ASTsum jjtn001 = new ASTsum(JJTSUM);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(PLUS);
        product();
      } catch (Throwable jjte001) {
if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
      jjtree.closeNodeScope(jjtn001,  2);
    }
      }
      more_products();
      break;
      }
    case MINUS:{
ASTdifference jjtn002 = new ASTdifference(JJTDIFFERENCE);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(MINUS);
        product();
      } catch (Throwable jjte002) {
if (jjtc002) {
      jjtree.clearNodeScope(jjtn002);
      jjtc002 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte002 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte002;}
    }
    if (jjte002 instanceof ParseException) {
      {if (true) throw (ParseException)jjte002;}
    }
    {if (true) throw (Error)jjte002;}
      } finally {
if (jjtc002) {
      jjtree.closeNodeScope(jjtn002,  2);
    }
      }
      more_products();
      break;
      }
    default:
      jj_la1[24] = jj_gen;

    }
}

  static final public void product() throws ParseException {
    term();
    more_terms();
}

  static final public void more_terms() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PROD:{
ASTproduct jjtn001 = new ASTproduct(JJTPRODUCT);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(PROD);
        term();
      } catch (Throwable jjte001) {
if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
      jjtree.closeNodeScope(jjtn001,  2);
    }
      }
      more_terms();
      break;
      }
    case DIV:{
ASTquotient jjtn002 = new ASTquotient(JJTQUOTIENT);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(DIV);
        term();
      } catch (Throwable jjte002) {
if (jjtc002) {
      jjtree.clearNodeScope(jjtn002);
      jjtc002 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte002 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte002;}
    }
    if (jjte002 instanceof ParseException) {
      {if (true) throw (ParseException)jjte002;}
    }
    {if (true) throw (Error)jjte002;}
      } finally {
if (jjtc002) {
      jjtree.closeNodeScope(jjtn002,  2);
    }
      }
      more_terms();
      break;
      }
    case MOD:{
ASTremainder jjtn003 = new ASTremainder(JJTREMAINDER);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
      try {
        jj_consume_token(MOD);
        term();
      } catch (Throwable jjte003) {
if (jjtc003) {
      jjtree.clearNodeScope(jjtn003);
      jjtc003 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte003 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte003;}
    }
    if (jjte003 instanceof ParseException) {
      {if (true) throw (ParseException)jjte003;}
    }
    {if (true) throw (Error)jjte003;}
      } finally {
if (jjtc003) {
      jjtree.closeNodeScope(jjtn003,  2);
    }
      }
      more_terms();
      break;
      }
    default:
      jj_la1[25] = jj_gen;

    }
}

  static final public void term() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAREN:{
      jj_consume_token(LPAREN);
      expression();
      jj_consume_token(RPAREN);
      break;
      }
    default:
      jj_la1[26] = jj_gen;
      if (jj_2_7(2)) {
        fn_call();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IDENTIFIER:{
          identifier();
          break;
          }
        case LCURLY:{
          set_const();
          break;
          }
        case NUMBER:{
          number();
          break;
          }
        case STRING:{
          string();
          break;
          }
        case NULL:{
ASTNULL jjtn001 = new ASTNULL(JJTNULL);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
          try {
            jj_consume_token(NULL);
          } finally {
if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
          }
          break;
          }
        default:
          jj_la1[27] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
}

  static final public void set_const() throws ParseException {
    jj_consume_token(LCURLY);
    set_elements();
    jj_consume_token(RCURLY);
}

  static final public void set_elements() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LCURLY:
    case LPAREN:
    case MINUS:
    case NULL:
    case NUMBER:
    case IDENTIFIER:
    case STRING:{
ASTset jjtn001 = new ASTset(JJTSET);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
        expression();
        label_8:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[28] = jj_gen;
            break label_8;
          }
          jj_consume_token(COMMA);
          expression();
        }
      } catch (Throwable jjte001) {
if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
      }
      break;
      }
    default:
      jj_la1[29] = jj_gen;
ASTset jjtn002 = new ASTset(JJTSET);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
      try {
jjtree.closeNodeScope(jjtn002, true);
    jjtc002 = false;

      } finally {
if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
      }
    }
}

  static final public void identifier() throws ParseException {/*@bgen(jjtree) identifier */
 ASTidentifier jjtn000 = new ASTidentifier(JJTIDENTIFIER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
jjtn000.jjtSetValue(t.getValue());
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
}

  static final public void number() throws ParseException {/*@bgen(jjtree) number */
 ASTnumber jjtn000 = new ASTnumber(JJTNUMBER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(NUMBER);
jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
jjtn000.jjtSetValue(t.getValue());
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
}

  static final public void string() throws ParseException {/*@bgen(jjtree) string */
 ASTstring jjtn000 = new ASTstring(JJTSTRING);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(STRING);
jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
jjtn000.jjtSetValue(t.getValue());
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
}

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_6()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_7()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_3R_comparator_376_3_28()
 {
    if (jj_scan_token(LESSEQ)) return true;
    return false;
  }

  static private boolean jj_3_2()
 {
    if (jj_3R_assignment_269_7_9()) return true;
    return false;
  }

  static private boolean jj_3_6()
 {
    if (jj_3R_expression_394_9_13()) return true;
    if (jj_3R_comparator_375_9_14()) return true;
    return false;
  }

  static private boolean jj_3_5()
 {
    if (jj_3R_term_420_9_12()) return true;
    if (jj_scan_token(ISA)) return true;
    return false;
  }

  static private boolean jj_3R_assignment_269_7_9()
 {
    if (jj_3R_identifier_443_4_16()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_3R_assignment_269_7_9()) return true;
    return false;
  }

  static private boolean jj_3R_string_453_4_42()
 {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  static private boolean jj_3R_parameters_342_17_61()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_expression_394_9_13()) return true;
    return false;
  }

  static private boolean jj_3R_set_elements_436_18_60()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_expression_394_9_13()) return true;
    return false;
  }

  static private boolean jj_3R_number_448_4_41()
 {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  static private boolean jj_3R_parameters_343_9_59()
 {
    if (jj_3R_expression_394_9_13()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_parameters_342_17_61()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_type_248_9_17()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_type_248_9_36()) {
    jj_scanpos = xsp;
    if (jj_3R_type_249_3_37()) {
    jj_scanpos = xsp;
    if (jj_3R_type_250_3_38()) {
    jj_scanpos = xsp;
    if (jj_3R_type_251_3_39()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_type_248_9_36()
 {
    if (jj_scan_token(NUM)) return true;
    return false;
  }

  static private boolean jj_3R_identifier_443_4_16()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_set_elements_437_9_53()
 {
    if (jj_3R_expression_394_9_13()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_set_elements_436_18_60()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_set_elements_437_9_46()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_set_elements_437_9_53()) {
    jj_scanpos = xsp;
    if (jj_3R_set_elements_438_3_54()) return true;
    }
    return false;
  }

  static private boolean jj_3R_type_251_3_39()
 {
    if (jj_scan_token(OBJ)) return true;
    return false;
  }

  static private boolean jj_3R_type_250_3_38()
 {
    if (jj_scan_token(SET)) return true;
    return false;
  }

  static private boolean jj_3R_type_249_3_37()
 {
    if (jj_scan_token(STR)) return true;
    return false;
  }

  static private boolean jj_3R_set_elements_438_3_54()
 {
    return false;
  }

  static private boolean jj_3R_set_const_431_9_40()
 {
    if (jj_scan_token(LCURLY)) return true;
    if (jj_3R_set_elements_437_9_46()) return true;
    if (jj_scan_token(RCURLY)) return true;
    return false;
  }

  static private boolean jj_3R_optional_parameters_338_3_52()
 {
    return false;
  }

  static private boolean jj_3R_optional_parameters_336_3_51()
 {
    if (jj_3R_parameters_343_9_59()) return true;
    return false;
  }

  static private boolean jj_3R_optional_parameters_336_3_45()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_optional_parameters_336_3_51()) {
    jj_scanpos = xsp;
    if (jj_3R_optional_parameters_338_3_52()) return true;
    }
    return false;
  }

  static private boolean jj_3R_term_427_3_24()
 {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  static private boolean jj_3R_term_420_9_12()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_term_420_9_19()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3R_term_422_3_20()) {
    jj_scanpos = xsp;
    if (jj_3R_term_423_3_21()) {
    jj_scanpos = xsp;
    if (jj_3R_term_424_3_22()) {
    jj_scanpos = xsp;
    if (jj_3R_term_425_3_23()) {
    jj_scanpos = xsp;
    if (jj_3R_term_427_3_24()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_term_420_9_19()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_expression_394_9_13()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_term_425_3_23()
 {
    if (jj_3R_string_453_4_42()) return true;
    return false;
  }

  static private boolean jj_3R_ident_list_228_9_18()
 {
    if (jj_3R_identifier_443_4_16()) return true;
    return false;
  }

  static private boolean jj_3R_term_424_3_22()
 {
    if (jj_3R_number_448_4_41()) return true;
    return false;
  }

  static private boolean jj_3R_term_423_3_21()
 {
    if (jj_3R_set_const_431_9_40()) return true;
    return false;
  }

  static private boolean jj_3R_term_422_3_20()
 {
    if (jj_3R_identifier_443_4_16()) return true;
    return false;
  }

  static private boolean jj_3_7()
 {
    if (jj_3R_fn_call_309_9_15()) return true;
    return false;
  }

  static private boolean jj_3R_simple_decl_223_9_10()
 {
    if (jj_3R_type_248_9_17()) return true;
    if (jj_3R_ident_list_228_9_18()) return true;
    return false;
  }

  static private boolean jj_3R_more_terms_415_3_57()
 {
    if (jj_scan_token(MOD)) return true;
    if (jj_3R_term_420_9_12()) return true;
    if (jj_3R_more_terms_413_3_47()) return true;
    return false;
  }

  static private boolean jj_3R_more_terms_415_2_58()
 {
    return false;
  }

  static private boolean jj_3R_more_terms_414_3_56()
 {
    if (jj_scan_token(DIV)) return true;
    if (jj_3R_term_420_9_12()) return true;
    if (jj_3R_more_terms_413_3_47()) return true;
    return false;
  }

  static private boolean jj_3R_more_terms_413_3_55()
 {
    if (jj_scan_token(PROD)) return true;
    if (jj_3R_term_420_9_12()) return true;
    if (jj_3R_more_terms_413_3_47()) return true;
    return false;
  }

  static private boolean jj_3R_more_terms_413_3_47()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_more_terms_413_3_55()) {
    jj_scanpos = xsp;
    if (jj_3R_more_terms_414_3_56()) {
    jj_scanpos = xsp;
    if (jj_3R_more_terms_415_3_57()) {
    jj_scanpos = xsp;
    if (jj_3R_more_terms_415_2_58()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_product_407_9_43()
 {
    if (jj_3R_term_420_9_12()) return true;
    if (jj_3R_more_terms_413_3_47()) return true;
    return false;
  }

  static private boolean jj_3_3()
 {
    if (jj_3R_simple_decl_223_9_10()) return true;
    return false;
  }

  static private boolean jj_3R_fn_call_309_9_15()
 {
    if (jj_3R_identifier_443_4_16()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_optional_parameters_336_3_45()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_more_products_402_3_49()
 {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_product_407_9_43()) return true;
    if (jj_3R_more_products_401_3_44()) return true;
    return false;
  }

  static private boolean jj_3R_more_products_402_2_50()
 {
    return false;
  }

  static private boolean jj_3R_more_products_401_3_48()
 {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_product_407_9_43()) return true;
    if (jj_3R_more_products_401_3_44()) return true;
    return false;
  }

  static private boolean jj_3R_more_products_401_3_44()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_more_products_401_3_48()) {
    jj_scanpos = xsp;
    if (jj_3R_more_products_402_3_49()) {
    jj_scanpos = xsp;
    if (jj_3R_more_products_402_2_50()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_expression_394_9_13()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_expression_394_9_25()) {
    jj_scanpos = xsp;
    if (jj_3R_expression_396_3_26()) return true;
    }
    return false;
  }

  static private boolean jj_3R_expression_394_9_25()
 {
    if (jj_3R_product_407_9_43()) return true;
    if (jj_3R_more_products_401_3_44()) return true;
    return false;
  }

  static private boolean jj_3R_expression_396_3_26()
 {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_product_407_9_43()) return true;
    if (jj_3R_more_products_401_3_44()) return true;
    return false;
  }

  static private boolean jj_3R_for_explicit_292_9_11()
 {
    if (jj_scan_token(FOR)) return true;
    if (jj_3R_identifier_443_4_16()) return true;
    if (jj_scan_token(FROM)) return true;
    return false;
  }

  static private boolean jj_3_4()
 {
    if (jj_3R_for_explicit_292_9_11()) return true;
    return false;
  }

  static private boolean jj_3R_comparator_383_3_35()
 {
    if (jj_scan_token(NOTIN)) return true;
    return false;
  }

  static private boolean jj_3R_comparator_382_3_34()
 {
    if (jj_scan_token(ISIN)) return true;
    return false;
  }

  static private boolean jj_3R_comparator_375_9_14()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_comparator_375_9_27()) {
    jj_scanpos = xsp;
    if (jj_3R_comparator_376_3_28()) {
    jj_scanpos = xsp;
    if (jj_3R_comparator_377_3_29()) {
    jj_scanpos = xsp;
    if (jj_3R_comparator_378_3_30()) {
    jj_scanpos = xsp;
    if (jj_3R_comparator_379_3_31()) {
    jj_scanpos = xsp;
    if (jj_3R_comparator_380_3_32()) {
    jj_scanpos = xsp;
    if (jj_3R_comparator_381_3_33()) {
    jj_scanpos = xsp;
    if (jj_3R_comparator_382_3_34()) {
    jj_scanpos = xsp;
    if (jj_3R_comparator_383_3_35()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_comparator_375_9_27()
 {
    if (jj_scan_token(LESS)) return true;
    return false;
  }

  static private boolean jj_3R_comparator_381_3_33()
 {
    if (jj_scan_token(NOTEQ)) return true;
    return false;
  }

  static private boolean jj_3R_comparator_380_3_32()
 {
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  static private boolean jj_3R_comparator_379_3_31()
 {
    if (jj_scan_token(NOTCOMP)) return true;
    return false;
  }

  static private boolean jj_3R_comparator_378_3_30()
 {
    if (jj_scan_token(GREATEQ)) return true;
    return false;
  }

  static private boolean jj_3R_comparator_377_3_29()
 {
    if (jj_scan_token(GREATER)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public HLTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[30];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x58001,0x0,0x58000,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x80,0x0,0xc0000000,0x0,0x58000,0x58000,0x80,0x800000,0x20,0x400000,0x10000,0x387e00,0x58000,0x1040000,0x2020100,0x10000,0x8000,0x80,0x58000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0xc8fee48,0x8fec48,0xc000200,0x8fec48,0x8000000,0x8fec48,0x88fec48,0x88fec48,0xe2c00,0x0,0xa0c00,0x0,0xa0c00,0x0,0x8,0xc400202,0xc000200,0x0,0x0,0x0,0x0,0x8000000,0x0,0xc000200,0x0,0x0,0x0,0xc000200,0x0,0xc000200,};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {0x2,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x2,0x0,0x2,};
	}
  static final private JJCalls[] jj_2_rtns = new JJCalls[7];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public HL(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public HL(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new HLTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 30; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 30; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public HL(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new HLTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 30; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new HLTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 30; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public HL(HLTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 30; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(HLTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 30; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[80];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 30; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		   if ((jj_la1_2[i] & (1<<j)) != 0) {
			 la1tokens[64+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 80; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 7; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			   case 5: jj_3_6(); break;
			   case 6: jj_3_7(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
