/* Generated By:JJTree&JavaCC: Do not edit this line. HLConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface HLConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int AND = 5;
  /** RegularExpression Id. */
  int ASSIGN = 6;
  /** RegularExpression Id. */
  int COMMA = 7;
  /** RegularExpression Id. */
  int DIV = 8;
  /** RegularExpression Id. */
  int EQUAL = 9;
  /** RegularExpression Id. */
  int GREATEQ = 10;
  /** RegularExpression Id. */
  int GREATER = 11;
  /** RegularExpression Id. */
  int ISIN = 12;
  /** RegularExpression Id. */
  int LESSEQ = 13;
  /** RegularExpression Id. */
  int LESS = 14;
  /** RegularExpression Id. */
  int LCURLY = 15;
  /** RegularExpression Id. */
  int LPAREN = 16;
  /** RegularExpression Id. */
  int MOD = 17;
  /** RegularExpression Id. */
  int MINUS = 18;
  /** RegularExpression Id. */
  int NOTCOMP = 19;
  /** RegularExpression Id. */
  int NOTEQ = 20;
  /** RegularExpression Id. */
  int NOTIN = 21;
  /** RegularExpression Id. */
  int NOT = 22;
  /** RegularExpression Id. */
  int OR = 23;
  /** RegularExpression Id. */
  int PLUS = 24;
  /** RegularExpression Id. */
  int PROD = 25;
  /** RegularExpression Id. */
  int RCURLY = 26;
  /** RegularExpression Id. */
  int RPAREN = 27;
  /** RegularExpression Id. */
  int SEMICOL = 28;
  /** RegularExpression Id. */
  int DO = 29;
  /** RegularExpression Id. */
  int ELIF = 30;
  /** RegularExpression Id. */
  int ELSE = 31;
  /** RegularExpression Id. */
  int END = 32;
  /** RegularExpression Id. */
  int FALSE = 33;
  /** RegularExpression Id. */
  int FI = 34;
  /** RegularExpression Id. */
  int FOR = 35;
  /** RegularExpression Id. */
  int FROM = 36;
  /** RegularExpression Id. */
  int FUNCTION = 37;
  /** RegularExpression Id. */
  int IF = 38;
  /** RegularExpression Id. */
  int IN = 39;
  /** RegularExpression Id. */
  int ISA = 40;
  /** RegularExpression Id. */
  int NULL = 41;
  /** RegularExpression Id. */
  int NUM = 42;
  /** RegularExpression Id. */
  int OBJ = 43;
  /** RegularExpression Id. */
  int OD = 44;
  /** RegularExpression Id. */
  int PREDICATE = 45;
  /** RegularExpression Id. */
  int PRINT = 46;
  /** RegularExpression Id. */
  int PRINTLN = 47;
  /** RegularExpression Id. */
  int RETURN = 48;
  /** RegularExpression Id. */
  int SET = 49;
  /** RegularExpression Id. */
  int SUB = 50;
  /** RegularExpression Id. */
  int STR = 51;
  /** RegularExpression Id. */
  int THEN = 52;
  /** RegularExpression Id. */
  int TO = 53;
  /** RegularExpression Id. */
  int TRUE = 54;
  /** RegularExpression Id. */
  int WHILE = 55;
  /** RegularExpression Id. */
  int DIGIT = 56;
  /** RegularExpression Id. */
  int LETTER = 57;
  /** RegularExpression Id. */
  int NUMBER = 58;
  /** RegularExpression Id. */
  int IDENTIFIER = 59;
  /** RegularExpression Id. */
  int STRING = 65;
  /** RegularExpression Id. */
  int COMMENT_SINGLE = 72;
  /** RegularExpression Id. */
  int COMMENT_MULTI = 74;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int INSTRING = 1;
  /** Lexical state. */
  int INCOMMENT0 = 2;
  /** Lexical state. */
  int INCOMMENT1 = 3;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"&\"",
    "\"=\"",
    "\",\"",
    "\"/\"",
    "\"==\"",
    "\">=\"",
    "\">\"",
    "\"=in\"",
    "\"<=\"",
    "\"<\"",
    "\"{\"",
    "\"(\"",
    "\"%\"",
    "\"-\"",
    "\"<>\"",
    "\"!=\"",
    "\"!in\"",
    "\"!\"",
    "\"|\"",
    "\"+\"",
    "\"*\"",
    "\"}\"",
    "\")\"",
    "\";\"",
    "\"DO\"",
    "\"ELIF\"",
    "\"ELSE\"",
    "\"END\"",
    "\"FALSE\"",
    "\"FI\"",
    "\"FOR\"",
    "\"FROM\"",
    "\"FUNCTION\"",
    "\"IF\"",
    "\"IN\"",
    "\"ISA\"",
    "\"NULL\"",
    "\"NUM\"",
    "\"OBJ\"",
    "\"OD\"",
    "\"PREDICATE\"",
    "\"PRINT\"",
    "\"PRINTLN\"",
    "\"RETURN\"",
    "\"SET\"",
    "\"SUB\"",
    "\"STR\"",
    "\"THEN\"",
    "\"TO\"",
    "\"TRUE\"",
    "\"WHILE\"",
    "<DIGIT>",
    "<LETTER>",
    "<NUMBER>",
    "<IDENTIFIER>",
    "\"\\\"\"",
    "\"\\\\\\\\\"",
    "\"\\\\\\\"\"",
    "\"\\\\t\"",
    "\"\\\\n\"",
    "\"\\\"\"",
    "<token of kind 66>",
    "<token of kind 67>",
    "<token of kind 68>",
    "<token of kind 69>",
    "<token of kind 70>",
    "<token of kind 71>",
    "<COMMENT_SINGLE>",
    "\"/*\"",
    "\"*/\"",
    "\"/*\"",
    "<token of kind 76>",
    "\"/*\"",
    "\"*/\"",
    "<token of kind 79>",
  };

}
