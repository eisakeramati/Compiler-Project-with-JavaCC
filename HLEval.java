/* Generated By:JavaCC: Do not edit this line. HLDefaultVisitor.java Version 7.0.9 */
import java.math.BigInteger;
import java.util.*;
import java.lang.*;

public class HLEval implements HLVisitor{
  public Object defaultVisit(SimpleNode node, Object data) throws Exception{
    node.childrenAccept(this, data);
    return data;
  }
  ArrayList<HLObject> identlist;
  public HLEval(){
    identlist = new ArrayList<HLObject>();
    stack = new ArrayList<ArrayList<valStack>>();
    activeStack = new ArrayList <Integer>();
  }
  ArrayList <ArrayList<valStack>> stack;
  ArrayList <Integer> activeStack;

  public int search_identlist(HLObject inp){
    for (int i = 0; i < identlist.size(); i++) {
      if (((HLString) inp).getValue().equals(((HLString) identlist.get(i)).getValue()))
        return i;
    }
    return -1;
  }

  public Object visit(SimpleNode node, Object data) throws Exception{
    return defaultVisit(node, data);
  }
  public Object visit(ASTbody node, Object data) throws Exception{

    for (int i=0; i<node.jjtGetNumChildren(); i++) {
      if (((SimpleNode) node.jjtGetChild(i)).getId() == 21){
        Object temp = node.jjtGetChild(i).jjtAccept(this,null);
        //System.out.println(temp);
        return temp;
      }
      Object res = node.jjtGetChild(i).jjtAccept(this,null);
      if (res != null){
        return res;
      }
    }
    //return defaultVisit(node, data);
    return null;
  }
  public Object visit(ASTclause node, Object data) throws Exception{
    for (int i=0; i<node.jjtGetNumChildren(); i++) {
      if (((SimpleNode) node.jjtGetChild(i)).getId() == 21){
        Object temp = node.jjtGetChild(i).jjtAccept(this,null);
        //System.out.println(temp);
        return temp;
      }
      node.jjtGetChild(i).jjtAccept(this,null);
    }
    return null;
  }

  public Object visit(ASTsimple_decl node, Object data) throws Exception{
    int ty = (Integer) node.jjtGetChild(0).jjtAccept(this,null);
    for (int i=0; i<node.jjtGetChild(1).jjtGetNumChildren(); i++) {
    node.jjtGetChild(1).jjtGetChild(i).jjtAccept(this,null);
    //System.out.println("here1");
    String value = ((String) ((ASTidentifier) node.jjtGetChild(1).jjtGetChild(i)).jjtGetValue());
    //System.out.println(value);
    HLString t = new HLString(value);
    valStack temp2;
    if (ty==HLType.NUM){
      temp2 = new valStack(ty, new HLNumber(0));}
    else if (ty==HLType.SET){
      temp2 = new valStack(ty, new HLSet());}
    else if (ty==HLType.STR){
      temp2 = new valStack(ty, new HLString(""));}
    else{
      temp2 = new valStack(ty, new HLObject());
    }
    //System.out.println("here");
    int ind = search_identlist(t);
      //System.out.println("here3");
    ArrayList<valStack> tt = stack.get(ind);
      //System.out.println("here4");
    tt.add(temp2);
    stack.set(ind, tt);
    activeStack.add(ind);
    }
    return null;
  }

  public Object visit(ASTident_list node, Object data) throws Exception{
    for (int i=0; i<node.jjtGetNumChildren(); i++) {
      node.jjtGetChild(i).jjtAccept(this,null);
      System.out.println("one");
    }
    return defaultVisit(node, data);
  }
  public Object visit(ASTfn_decl node, Object data) throws Exception{

    int type = (Integer) node.jjtGetChild(0).jjtAccept(this,null);
    node.jjtGetChild(1).jjtAccept(this,null);
    valStack val = new valStack(type, ((ASTbody) node.jjtGetChild(3)), ((ASTparam_decls) node.jjtGetChild(2)));
    String value = ((String) ((ASTidentifier) node.jjtGetChild(1)).jjtGetValue());
    HLString tt = new HLString(value);
    int ind = search_identlist(tt);
    ArrayList<valStack> temp = stack.get(ind);
    temp.add(val);
    stack.set(ind, temp);
    activeStack.add(ind);
    //return defaultVisit(node, data);
    return null;
  }
  public Object visit(ASTsub_decl node, Object data) throws Exception{
    node.jjtGetChild(0).jjtAccept(this,null);
    valStack val = new valStack(HLType.VOID, ((ASTbody) node.jjtGetChild(2)), ((ASTparam_decls) node.jjtGetChild(1)));
    String value = ((String) ((ASTidentifier) node.jjtGetChild(0)).jjtGetValue());
    HLString tt = new HLString(value);
    int ind = search_identlist(tt);
    ArrayList<valStack> temp = stack.get(ind);
    temp.add(val);
    stack.set(ind, temp);
    //return defaultVisit(node, data);
    return null;
  }
  public Object visit(ASTpredicate_decl node, Object data) throws Exception{
    node.jjtGetChild(0).jjtAccept(this,null);
    valStack val = new valStack(HLType.VOID, ((ASTbody) node.jjtGetChild(2)), ((ASTparam_decls) node.jjtGetChild(1)));
    String value = ((String) ((ASTidentifier) node.jjtGetChild(0)).jjtGetValue());
    HLString tt = new HLString(value);
    int ind = search_identlist(tt);
    ArrayList<valStack> temp = stack.get(ind);
    temp.add(val);
    stack.set(ind, temp);
    //return defaultVisit(node, data);
    return null;
  }
  public Object visit(ASTNUMTYPE node, Object data) throws Exception{
    return HLType.NUM;
  }
  public Object visit(ASTSTRTYPE node, Object data) throws Exception{
    return HLType.STR;
  }
  public Object visit(ASTSETTYPE node, Object data) throws Exception{
    return HLType.SET;
  }
  public Object visit(ASTOBJTYPE node, Object data) throws Exception{
    return HLType.OBJ;
  }
  public Object visit(ASTparam_decls node, Object data) throws Exception{
    for (int i=0; i<node.jjtGetNumChildren(); i++) {
      node.jjtGetChild(i).jjtAccept(this,null);
    }
    //return defaultVisit(node, data);
    return null;
  }
  public Object visit(ASTparam_decl node, Object data) throws Exception{
    int ty = (Integer) node.jjtGetChild(0).jjtAccept(this,null);
      node.jjtGetChild(1).jjtAccept(this,null);
      //System.out.println("here1");
      String value = ((String) ((ASTidentifier) node.jjtGetChild(1)).jjtGetValue());
      //System.out.println(value);
      HLString t = new HLString(value);
      valStack temp2;
      if (ty==HLType.NUM){
        temp2 = new valStack(ty, new HLNumber(0));}
      else if (ty==HLType.SET){
        temp2 = new valStack(ty, new HLSet());}
      else if (ty==HLType.STR){
        temp2 = new valStack(ty, new HLString(""));}
      else{
        temp2 = new valStack(ty, new HLObject());
      }
      //System.out.println("here");
      int ind = search_identlist(t);
      ArrayList<valStack> tt = stack.get(ind);
      //tt.add(temp2);
      //stack.set(ind, tt);
      activeStack.add(ind);
    return null;
  }

  public String typer(int t){
    if (t == HLType.SET){
      return "HLSet";
    } else if(t == HLType.STR){
      return "HLString";
    } else if(t == HLType.NUM){
      return "HLNumber";
    }
    return "HLObject";
  }

  public Object visit(ASTassignment node, Object data) throws Exception{
    HLObject ty = (HLObject) node.jjtGetChild(0).jjtAccept(this,null);
    String value = ((String) ((ASTidentifier) node.jjtGetChild(0)).jjtGetValue());
    HLString tt = new HLString(value);
    HLObject t = (HLObject) node.jjtGetChild(1).jjtAccept(this,null);
    valStack temp2;
    temp2 = new valStack(t.intType(), t);
    //System.out.println("11p");
    int ind = search_identlist(tt);
    //System.out.println("22p");
    ArrayList<valStack> temp = stack.get(ind);
    if (((valStack) temp.get(temp.size()-1)).type != temp2.type){
      throw new EvaluationException("Assignment error", value, typer(temp2.type), typer(((valStack) temp.get(temp.size()-1)).type), temp2.value.toString());
    }else{
    temp.add(temp2);
    stack.set(ind, temp);
    activeStack.add(ind);}
    return defaultVisit(node, data);
  }
  public Object visit(ASTif_stat node, Object data) throws Exception{
    if ((Boolean) node.jjtGetChild(0).jjtAccept(this,null)){
      Object ress =node.jjtGetChild(1).jjtAccept(this,null);
      //System.out.println(ress);
      if (ress != null){
        return ress;
      }
    }
    else {
      Object ress = node.jjtGetChild(2).jjtAccept(this,null);
      //System.out.println(ress);
      if (ress != null){
        return ress;
      }
    }
    return null;
  }
  public Object visit(ASTNOTHING node, Object data) throws Exception{
    return null;
  }
  public Object visit(ASTfor_explicit node, Object data) throws Exception{
    String value =(String) (((ASTidentifier) node.jjtGetChild(0)).jjtGetValue());
    HLString temp = new HLString(value);
    int a = ((HLNumber) node.jjtGetChild(1).jjtAccept(this,null)).getValue();
    int b = ((HLNumber) node.jjtGetChild(2).jjtAccept(this,null)).getValue();
    //System.out.println(a);
    //System.out.println(b);
    int last = a;
    if (a<b){
      for (int i = a; i < b+1; i++) {
        //System.out.println(identlist);
        int ind = search_identlist(temp);
        //System.out.println(ind);
        ArrayList<valStack> arr = stack.get(ind);
        arr.add(new valStack(HLType.NUM, new HLNumber(i)));
        stack.set(ind, arr);
        Object ress = node.jjtGetChild(3).jjtAccept(this,null);
        if (ress != null){
          return ress;
        }
        b = ((HLNumber) node.jjtGetChild(2).jjtAccept(this,null)).getValue();
        last = i;
      }
      last = last +1;
    }else{
      for (int i = a; i > b-1; i--) {
        int ind = search_identlist(temp);
        ArrayList<valStack> arr = stack.get(ind);
        arr.add(new valStack(HLType.NUM, new HLNumber(i)));
        stack.set(ind, arr);
        Object ress = node.jjtGetChild(3).jjtAccept(this,null);
        if (ress != null){
          return ress;
        }
        b = ((HLNumber) node.jjtGetChild(2).jjtAccept(this,null)).getValue();
        last = i;
      }
      last = last-1;
    }
    int ind = search_identlist(temp);
    ArrayList<valStack> arr = stack.get(ind);
    arr.add(new valStack(HLType.NUM, new HLNumber(last)));
    stack.set(ind, arr);
   // return defaultVisit(node, data);
    return null;
  }

  public Object visit(ASTfor_implicit node, Object data) throws Exception{
    HLSet set = (HLSet) node.jjtGetChild(1).jjtAccept(this,null);
    ArrayList<HLObject> arr = set.getSet_obj();
    Object ress;
    String str = (String) (((ASTidentifier) node.jjtGetChild(0)).jjtGetValue());
    int ind = search_identlist(new HLString(str));
    ArrayList<valStack> temparr = stack.get(ind);
    valStack vals = new valStack(((HLObject) arr.get(0)).intType(), arr.get(0));
    temparr.add(vals);
    stack.set(ind, temparr);
    ress = node.jjtGetChild(2).jjtAccept(this,null);
    if (ress != null){
      return ress;
    }
    for (int i = 1; i <arr.size() ; i++) {
      vals = new valStack(((HLObject) arr.get(i)).intType(), arr.get(i));
      temparr.add(vals);
      stack.set(ind, temparr);
      ress = node.jjtGetChild(2).jjtAccept(this,null);
      if (ress != null){
        return ress;
      }
    }
    return null;
  }
  public Object visit(ASTwhile_stat node, Object data) throws Exception{
    while((boolean) node.jjtGetChild(0).jjtAccept(this,null)){
      Object ress= node.jjtGetChild(1).jjtAccept(this,null);
      if (ress != null){
        return ress;
      }
    }
    //return defaultVisit(node, data);
    return null;
  }
  public Object visit(ASTfn_call node, Object data) throws Exception{
    //System.out.println(identlist);
    String str = (String) (((ASTidentifier) node.jjtGetChild(0)).jjtGetValue());
    HLString ob = new HLString(str);
    if (str.equals("card")){
      HLSet set = (HLSet) node.jjtGetChild(1).jjtGetChild(0).jjtAccept(this,null);
      return set.card();
    }
    else{
      int ind = search_identlist(ob);
      activeStack.add(ind);
      ArrayList<valStack> valss= stack.get(ind);
      int intt = valss.size()-1;
//      while(valss.get(intt).type != HLType.VOID){
//        intt = intt -1;
//      }
      valStack vals = valss.get(intt);
      if (vals.body == null){
        throw new EvaluationException(str, typer(vals.type), 3);
      }else if (vals.params.jjtGetNumChildren() != ((SimpleNode) node.jjtGetChild(1)).jjtGetNumChildren()){
        throw new EvaluationException(str, vals.params.jjtGetNumChildren(), ((SimpleNode) node.jjtGetChild(1)).jjtGetNumChildren());
      }
      else{
      ASTparam_decls par = vals.params;
      //System.out.println(par.jjtGetNumChildren());
      for (int i=par.jjtGetNumChildren()-1; i> -1; i--) {
        par.jjtGetChild(i).jjtAccept(this,null);
        String parm = (String) (((ASTidentifier) ((SimpleNode) par.jjtGetChild(i)).jjtGetChild(1)).jjtGetValue());
        int typepar = (Integer) ((par.jjtGetChild(i)).jjtGetChild(0)).jjtAccept(this,null);
        //System.out.println(parm);
        HLString string = new HLString(parm);
        int a = search_identlist(string);
        ArrayList<valStack> arr = stack.get(a);
        HLObject hlob = (HLObject) ((SimpleNode) node.jjtGetChild(1)).jjtGetChild(i).jjtAccept(this,null);
        //System.out.println(((HLNumber) hlob).getValue());
        if (hlob.intType() != typepar){
          throw new EvaluationException(str, parm, typer(typepar), typer(hlob.intType()), hlob.toString(),5,7);
        }
        valStack valtemp = new valStack(hlob.intType(), hlob);
        arr.add(valtemp);
        stack.set(a, arr);
      }
      
      ASTbody bod = vals.body;
      Object res = bod.jjtAccept(this,null);
      int count = activeStack.size()-1;
      //System.out.println(identlist);
      while (activeStack.get(count) != ind){
        int rm = activeStack.get(count);
        ArrayList<valStack> rmd = stack.get(rm);
        //System.out.println(rmd.get(rmd.size()-3).value);
        //System.out.println(identlist);
        rmd.remove(rmd.size()-1);
        stack.set(rm, rmd);
        activeStack.remove(count);
        count = count -1;
      }
      activeStack.remove(count);
      //System.out.println(identlist);
      return res;}
    }
  }
  public Object visit(ASTreturn_stat node, Object data) throws Exception{
    Object res = node.jjtGetChild(0).jjtAccept(this,null);
    //System.out.println(res);
    return res;
  }
  public Object visit(ASTTRUE node, Object data) throws Exception{
    return true;
  }
  public Object visit(ASTFALSE node, Object data) throws Exception{
    return false;
  }
  public Object visit(ASTprint node, Object data) throws Exception{
    for (int i=0; i<node.jjtGetChild(0).jjtGetNumChildren(); i++) {
      HLObject temp = ((HLObject) node.jjtGetChild(0).jjtGetChild(i).jjtAccept(this,null));
      System.out.print(temp.toString());
      //res = res.concat(((HLObject) node.jjtGetChild(0).jjtAccept(this,null)).toString);
    }
    return null;
  }
  public Object visit(ASTprintln node, Object data) throws Exception{
    for (int i=0; i<node.jjtGetChild(0).jjtGetNumChildren(); i++) {
      HLObject temp = ((HLObject) node.jjtGetChild(0).jjtGetChild(i).jjtAccept(this,null));
      System.out.print(temp.toString());
      //res = res.concat(((HLObject) node.jjtGetChild(0).jjtAccept(this,null)).toString);
    }
    System.out.println();
    return null;
  }
  public Object visit(ASTparameters node, Object data) throws Exception{
    return defaultVisit(node, data);
  }
  public Object visit(ASTor node, Object data) throws Exception{
    boolean res = false;
    for (int i=0; i<node.jjtGetNumChildren(); i++) {
      res = res || ((Boolean) node.jjtGetChild(i).jjtAccept(this,null));
    }
    return res;
  }
  public Object visit(ASTand node, Object data) throws Exception{
    boolean res = true;
    for (int i=0; i<node.jjtGetNumChildren(); i++) {
      res = res && ((Boolean) node.jjtGetChild(i).jjtAccept(this,null));
    }
    return res;
  }
  public Object visit(ASTnot node, Object data) throws Exception{
    boolean temp1 = ((Boolean) node.jjtGetChild(0).jjtAccept(this,null));
    return !temp1;
  }
  public Object visit(ASTcomparison node, Object data) throws Exception{
//    int val1 = ((HLNumber) node.jjtGetChild(0).jjtAccept(this,null));
//    int val2 = ((HLNumber) node.jjtGetChild(2).jjtAccept(this,null));
    return node.jjtGetChild(1).jjtAccept(this,null);
  }
  public Object visit(ASTLESS node, Object data) throws Exception{
    HLObject temp1 = ((HLObject) node.jjtGetParent().jjtGetChild(0).jjtAccept(this,null));
    if (temp1.intType()==HLType.NUM){
      HLNumber temp2 = ((HLNumber) node.jjtGetParent().jjtGetChild(2).jjtAccept(this,null));
      return ((HLNumber) temp1).getValue() < temp2.getValue();}
    else if (temp1.intType()==HLType.SET){
      HLSet temp2 = ((HLSet) node.jjtGetParent().jjtGetChild(2).jjtAccept(this,null));
      int a = ((HLSet) temp1).numset(temp2);
      if (a< temp2.getSet_obj().size() && a==((HLSet) temp1).getSet_obj().size())
        return true;
      else
        return false;
    }
    return false;
  }

  public Object visit(ASTLESSEQ node, Object data) throws Exception{
    HLObject temp1 = ((HLObject) node.jjtGetParent().jjtGetChild(0).jjtAccept(this,null));
    if (temp1.intType()==HLType.NUM){
      HLNumber temp2 = ((HLNumber) node.jjtGetParent().jjtGetChild(2).jjtAccept(this,null));
      return ((HLNumber) temp1).getValue() <= temp2.getValue();}
    else if (temp1.intType()==HLType.SET){
      HLSet temp2 = ((HLSet) node.jjtGetParent().jjtGetChild(2).jjtAccept(this,null));
      int a = ((HLSet) temp1).numset(temp2);
      if (a<= temp2.getSet_obj().size() && a==((HLSet) temp1).getSet_obj().size())
        return true;
      else
        return false;
    }
    return false;
  }

  public Object visit(ASTGREATER node, Object data) throws Exception{
    HLObject temp1 = ((HLObject) node.jjtGetParent().jjtGetChild(0).jjtAccept(this,null));
    if (temp1.intType()==HLType.NUM){
      HLNumber temp2 = ((HLNumber) node.jjtGetParent().jjtGetChild(2).jjtAccept(this,null));
      return ((HLNumber) temp1).getValue() > temp2.getValue();}
    else if (temp1.intType()==HLType.SET){
      HLSet temp2 = ((HLSet) node.jjtGetParent().jjtGetChild(2).jjtAccept(this,null));
      int a = ((HLSet) temp1).numset(temp2);
      if (a == temp2.getSet_obj().size() && a < ((HLSet) temp1).getSet_obj().size())
        return true;
      else
        return false;
    }
    return false;

  }

  public Object visit(ASTGREATEQ node, Object data) throws Exception{
    HLObject temp1 = ((HLObject) node.jjtGetParent().jjtGetChild(0).jjtAccept(this,null));
    if (temp1.intType()==HLType.NUM){
      HLNumber temp2 = ((HLNumber) node.jjtGetParent().jjtGetChild(2).jjtAccept(this,null));
      return ((HLNumber) temp1).getValue() >= temp2.getValue();}
    else if (temp1.intType()==HLType.SET){
      HLSet temp2 = ((HLSet) node.jjtGetParent().jjtGetChild(2).jjtAccept(this,null));
      int a = ((HLSet) temp1).numset(temp2);
      if (a == temp2.getSet_obj().size() && a <= ((HLSet) temp1).getSet_obj().size())
        return true;
      else
        return false;
    }
    return false;

  }

  public Object visit(ASTNOTCOMP node, Object data) throws Exception{
    HLObject temp1 = ((HLObject) node.jjtGetParent().jjtGetChild(0).jjtAccept(this,null));
    HLObject temp2 = ((HLObject) node.jjtGetParent().jjtGetChild(2).jjtAccept(this,null));
    if (temp1.intType() == temp2.intType()){
      if (temp1.intType()==HLType.NUM && ((HLNumber) temp1).getValue() == ((HLNumber) temp2).getValue())
        return false;
      else if (temp1.intType()==HLType.STR && ((HLString) temp1).getValue() == ((HLString) temp2).getValue())
        return false;
    } else {
      return true;
    }
    return true;
  }

  public Object visit(ASTEQUAL node, Object data) throws Exception{
    HLObject temp1 = ((HLObject) node.jjtGetParent().jjtGetChild(0).jjtAccept(this,null));
    if (temp1.intType()==HLType.NUM){
      HLNumber temp2 = ((HLNumber) node.jjtGetParent().jjtGetChild(2).jjtAccept(this,null));
      return ((HLNumber) temp1).getValue() == temp2.getValue();}
    else if (temp1.intType()==HLType.SET){
      HLSet temp2 = ((HLSet) node.jjtGetParent().jjtGetChild(2).jjtAccept(this,null));
      int a = ((HLSet) temp1).numset(temp2);
      if (a == temp2.getSet_obj().size() && a==((HLSet) temp1).getSet_obj().size())
        return true;
      else
        return false;
    } else {
      HLObject temp2 = ((HLObject) node.jjtGetParent().jjtGetChild(2).jjtAccept(this,null));
      return  ((HLString) temp1).getValue().equals(((HLString) temp2).getValue());
    }
  }

  public Object visit(ASTNOTEQ node, Object data) throws Exception{
    HLObject temp1 = ((HLObject) node.jjtGetParent().jjtGetChild(0).jjtAccept(this,null));
    if (temp1.intType()==HLType.NUM){
      HLNumber temp2 = ((HLNumber) node.jjtGetParent().jjtGetChild(2).jjtAccept(this,null));
      return ((HLNumber) temp1).getValue() != temp2.getValue();}
    else if (temp1.intType()==HLType.SET){
      HLSet temp2 = ((HLSet) node.jjtGetParent().jjtGetChild(2).jjtAccept(this,null));
      int a = ((HLSet) temp1).numset(temp2);
      if (!(a == temp2.getSet_obj().size() && a ==((HLSet) temp1).getSet_obj().size()))
        return true;
      else
        return false;
    } else {
      HLObject temp2 = ((HLObject) node.jjtGetParent().jjtGetChild(2).jjtAccept(this,null));
      return  !((HLString) temp1).getValue().equals(((HLString) temp2).getValue());
    }
  }

  public Object visit(ASTISIN node, Object data) throws Exception{
    HLObject temp2 = ((HLObject) node.jjtGetParent().jjtGetChild(2).jjtAccept(this,null));
    if (temp2.intType()==HLType.STR){
    HLObject temp1 = ((HLObject) node.jjtGetParent().jjtGetChild(0).jjtAccept(this,null));
    if (temp1.intType() == HLType.STR){
      if (((HLString) temp2).getValue().contains(((HLString) temp1).getValue())){
        return true;
      }
      return false;
    }
  } else if (temp2.intType()==HLType.SET){
      HLObject temp1 = ((HLObject) node.jjtGetParent().jjtGetChild(0).jjtAccept(this,null));
      if (((HLSet)temp2).inset(temp1))
        return true;
      else
        return false;
    }
    return false;
  }

  public Object visit(ASTNOTIN node, Object data) throws Exception{
    HLObject temp2 = ((HLObject) node.jjtGetParent().jjtGetChild(2).jjtAccept(this,null));
    if (temp2.intType()==HLType.STR){
      HLObject temp1 = ((HLObject) node.jjtGetParent().jjtGetChild(0).jjtAccept(this,null));
      if (temp1.intType() == HLType.STR){
        if (!(((HLString) temp2).getValue().contains(((HLString) temp1).getValue()))){
          return true;
        }
        return false;
      }
    } else if (temp2.intType()==HLType.SET){
      HLObject temp1 = ((HLObject) node.jjtGetParent().jjtGetChild(0).jjtAccept(this,null));
      if (!((HLSet) temp2).inset(temp1))
        return true;
      else
        return false;
    }
    return false;
  }

  public Object visit(ASTisatype node, Object data) throws Exception{
    HLObject temp = (HLObject) node.jjtGetChild(0).jjtAccept(this,null);
    if (temp.intType() == ((Integer) node.jjtGetChild(1).jjtAccept(this,null)) || ((Integer) node.jjtGetChild(1).jjtAccept(this,null)) == HLType.OBJ){
      return true;
    }
    else {
      return false;
    }
  }
  public Object visit(ASTnegate node, Object data) throws Exception{
    HLNumber dec = (HLNumber) node.jjtGetChild(0).jjtAccept(this,null);
    dec.setValue(-1 * (dec.getValue()));
    return dec;
  }
  public Object visit(ASTsum node, Object data) throws Exception{
    HLObject dec = (HLObject) node.jjtGetChild(0).jjtAccept(this,null);
    HLObject dec2 = (HLObject) node.jjtGetChild(1).jjtAccept(this,null);
    //String value = ((String) node.jjtGetValue());
    if (dec.intType() != dec2.intType()){
      throw new EvaluationException("SUM", typer(dec.intType()), typer(dec2.intType()), dec.toString(), dec2.toString(), 2);
    }else{
    if (dec.intType() == HLType.NUM){
      dec = new HLNumber(0);
    for (int i=0; i<node.jjtGetNumChildren(); i++) {
      ((HLNumber) dec).add((HLNumber) node.jjtGetChild(i).jjtAccept(this,null));
    }
    } else if (dec.intType() == HLType.STR){
      dec= new HLString("");
      for (int i=0; i<node.jjtGetNumChildren(); i++) {
        ((HLString) dec).add(((HLObject) node.jjtGetChild(i).jjtAccept(this,null)));
      }
    } else if (dec.intType() == HLType.SET){
      dec= new HLSet();
      for (int i=0; i<node.jjtGetNumChildren(); i++) {
        dec = ((HLSet) dec).union((HLObject) node.jjtGetChild(i).jjtAccept(this,null));
      }
    }}
    return dec;
  }

  public Object visit(ASTdifference node, Object data) throws Exception{
    HLObject dec = (HLObject) node.jjtGetChild(0).jjtAccept(this,null);
    HLObject dec2 = (HLObject) node.jjtGetChild(1).jjtAccept(this,null);
    if (dec.intType() != dec2.intType()){
      throw new EvaluationException("SUB", typer(dec.intType()), typer(dec2.intType()), dec.toString(), dec2.toString(), 2);
    }else{
    if (dec.intType() == HLType.NUM){
      dec = new HLNumber(((HLNumber) dec).getValue());
      for (int i=1; i<node.jjtGetNumChildren(); i++) {
        ((HLNumber) dec).sub((HLNumber) node.jjtGetChild(i).jjtAccept(this,null));
      }
    }else if (dec.intType() == HLType.SET){
      dec= (HLSet) dec;
      for (int i=1; i<node.jjtGetNumChildren(); i++) {
        dec = ((HLSet) dec).diff((HLObject) node.jjtGetChild(i).jjtAccept(this,null));
      }
    }}
    return dec;
  }

  public Object visit(ASTproduct node, Object data) throws Exception{
    HLObject dec = (HLObject) node.jjtGetChild(0).jjtAccept(this,null);
    HLObject dec2 = (HLObject) node.jjtGetChild(1).jjtAccept(this,null);
    if (dec.intType() != dec2.intType()){
      throw new EvaluationException("PROD", typer(dec.intType()), typer(dec2.intType()), dec.toString(), dec2.toString(), 2);
    }else{
    if (dec.intType() == HLType.NUM){
      dec = new HLNumber(1);
      for (int i=0; i<node.jjtGetNumChildren(); i++) {
        ((HLNumber) dec).mul((HLNumber) node.jjtGetChild(i).jjtAccept(this,null));
      }
    }else if (dec.intType() == HLType.SET){
      dec= (HLSet) dec;
      for (int i=1; i<node.jjtGetNumChildren(); i++) {
        dec = ((HLSet) dec).intersec((HLObject) node.jjtGetChild(i).jjtAccept(this,null));
      }
    }}
    return dec;
  }
  public Object visit(ASTquotient node, Object data) throws Exception{
    HLNumber temp = ((HLNumber) node.jjtGetChild(0).jjtAccept(this,null));
    HLObject dec2 = (HLObject) node.jjtGetChild(1).jjtAccept(this,null);
    if (temp.intType() != dec2.intType()){
      throw new EvaluationException("DIV", typer(temp.intType()), typer(dec2.intType()), temp.toString(), dec2.toString(), 2);
    }else{
    temp = new HLNumber(temp.getValue());
    for (int i=1; i<node.jjtGetNumChildren(); i++) {
      temp.div((HLNumber) node.jjtGetChild(i).jjtAccept(this,null));
    }}
    return temp;
  }
  public Object visit(ASTremainder node, Object data) throws Exception{
    HLNumber temp = ((HLNumber) node.jjtGetChild(0).jjtAccept(this,null));
    HLObject dec2 = (HLObject) node.jjtGetChild(1).jjtAccept(this,null);
    if (temp.intType() != dec2.intType()){
      throw new EvaluationException("REM", typer(temp.intType()), typer(dec2.intType()), temp.toString(), dec2.toString(), 2);
    }else{
    temp = new HLNumber(temp.getValue());
    for (int i=1; i<node.jjtGetNumChildren(); i++) {
      temp.mod((HLNumber) node.jjtGetChild(i).jjtAccept(this,null));
    }}
    return temp;
  }
  public Object visit(ASTNULL node, Object data) throws Exception{
    return null;
  }
  public Object visit(ASTset node, Object data) throws Exception{
    HLSet res = new HLSet();
    for (int i=0; i<node.jjtGetNumChildren(); i++) {
      res.add((HLObject) node.jjtGetChild(i).jjtAccept(this,null));
    }
    return res;
  }
  public Object visit(ASTidentifier node, Object data) throws Exception{
    String value = ((String) node.jjtGetValue());
    HLString temp = new HLString(value);
    if (search_identlist(temp) == -1){
      identlist.add(temp);
      ArrayList<valStack> arr = new ArrayList<valStack>();
      stack.add(arr);
      return null;
    }
      int ind = search_identlist(temp);
      ArrayList<valStack> arr = stack.get(ind);
      if (arr.size() != 0) {
        valStack v = arr.get(arr.size() - 1);
      return v.value;}
      return null;
  }
  public Object visit(ASTnumber node, Object data) throws Exception{
    int value = new Integer (((BigInteger) node.jjtGetValue()).intValue());
    //System.out.println(value);
    //return defaultVisit(node, data);
    return new HLNumber(value);
  }
  public Object visit(ASTstring node, Object data) throws Exception{
    String value = ((String) node.jjtGetValue());
    //return defaultVisit(node, data);
    return new HLString(value);
  }
}
/* JavaCC - OriginalChecksum=a8b10eac0f39ea54d5b8472f80eabdce (do not edit this line) */
